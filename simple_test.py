"""
–≠–Ω–≥–∏–π–Ω —Ç–µ—Å—Ç —Ñ–∞–π–ª - –±–æ—Ç—ã–Ω –ª–æ–≥–∏–∫–∏–π–≥ —à–∞–ª–≥–∞—Ö
"""
import asyncio

class MockActivity:
    """Mock Activity for testing"""
    def __init__(self, text):
        self.text = text
        self.type = "message"

class MockTurnContext:
    """Mock TurnContext for testing"""
    def __init__(self, activity):
        self.activity = activity
        self.responses = []
    
    async def send_activity(self, text):
        """Mock send_activity method"""
        self.responses.append(text)
        print(f"üîÑ –ë–æ—Ç —Ö–∞—Ä–∏—É–ª—Ç: {text}")

async def test_echo_logic():
    """–≠—Ö–æ –ª–æ–≥–∏–∫–∏–π–≥ —Ç–µ—Å—Ç–ª—ç—Ö"""
    
    # Mock activity “Ø“Ø—Å–≥—ç—Ö
    test_activity = MockActivity("Hello, this is a test message!")
    
    # Mock context “Ø“Ø—Å–≥—ç—Ö
    mock_context = MockTurnContext(test_activity)
    
    try:
        # –≠—Ö–æ –ª–æ–≥–∏–∫–∏–π–≥ —Ç–µ—Å—Ç–ª—ç—Ö
        user_message = mock_context.activity.text
        echo_response = f"Echo: {user_message}"
        
        # Send echo response
        await mock_context.send_activity(echo_response)
        print(f"üìù –•“Ø–ª—ç—ç–Ω –∞–≤—Å–∞–Ω: {user_message}")
        
        # –•–∞—Ä–∏—É–ª—Ç—ã–≥ —à–∞–ª–≥–∞—Ö
        if mock_context.responses:
            expected_response = "Echo: Hello, this is a test message!"
            actual_response = mock_context.responses[0]
            
            if actual_response == expected_response:
                print("‚úÖ –≠—Ö–æ –ª–æ–≥–∏–∫ –∑”©–≤ –∞–∂–∏–ª–ª–∞–∂ –±–∞–π–Ω–∞!")
                print(f"üìù –•“Ø–ª—ç—ç–Ω –∞–≤—Å–∞–Ω: {user_message}")
                print(f"üîÑ –•–∞—Ä–∏—É–ª—Ç: {actual_response}")
            else:
                print("‚ùå –ê–ª–¥–∞–∞: –•“Ø–ª—ç—ç–≥–¥—ç–∂ –±—É–π —Ö–∞—Ä–∏—É–ª—Ç—Ç–∞–π —Ç–∞–∞—Ä–∞—Ö–≥“Ø–π –±–∞–π–Ω–∞")
                print(f"–•“Ø–ª—ç—ç–≥–¥—ç–∂ –±—É–π: {expected_response}")
                print(f"–ë–æ–¥–∏—Ç: {actual_response}")
        else:
            print("‚ùå –ê–ª–¥–∞–∞: –•–∞—Ä–∏—É–ª—Ç –±–∞–π—Ö–≥“Ø–π –±–∞–π–Ω–∞")
            
    except Exception as e:
        print(f"‚ùå –ê–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: {e}")

if __name__ == "__main__":
    asyncio.run(test_echo_logic())
