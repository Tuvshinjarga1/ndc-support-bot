"""
–õ–æ–∫–∞–ª —Ç–µ—Å—Ç —Ñ–∞–π–ª - Microsoft Teams —Ç–æ—Ö–∏—Ä–≥–æ–æ–≥“Ø–π–≥—ç—ç—Ä –±–æ—Ç—ã–≥ —Ç–µ—Å—Ç–ª—ç—Ö
"""
import asyncio
import json
from aiohttp import web

async def test_echo_logic():
    """–≠—Ö–æ –ª–æ–≥–∏–∫–∏–π–≥ —Ç–µ—Å—Ç–ª—ç—Ö"""
    
    # –¢–µ—Å—Ç –º–µ—Å—Å–µ–∂
    test_message = "Hello, this is a test message!"
    expected_response = f"Echo: {test_message}"
    
    print("üß™ –≠—Ö–æ –±–æ—Ç—ã–Ω –ª–æ–≥–∏–∫–∏–π–≥ —Ç–µ—Å—Ç–ª—ç–∂ –±–∞–π–Ω–∞...")
    print(f"üìù –¢–µ—Å—Ç –º–µ—Å—Å–µ–∂: {test_message}")
    print(f"üîÑ –•“Ø–ª—ç—ç–≥–¥—ç–∂ –±—É–π —Ö–∞—Ä–∏—É–ª—Ç: {expected_response}")
    
    # –≠—Ö–æ –ª–æ–≥–∏–∫–∏–π–≥ —Å–∏–º—É–ª—è—Ü–∏ —Ö–∏–π—Ö
    actual_response = f"Echo: {test_message}"
    
    if actual_response == expected_response:
        print("‚úÖ –≠—Ö–æ –ª–æ–≥–∏–∫ –∑”©–≤ –∞–∂–∏–ª–ª–∞–∂ –±–∞–π–Ω–∞!")
        print(f"üìù –•“Ø–ª—ç—ç–Ω –∞–≤—Å–∞–Ω: {test_message}")
        print(f"üîÑ –•–∞—Ä–∏—É–ª—Ç: {actual_response}")
        return True
    else:
        print("‚ùå –ê–ª–¥–∞–∞: –•“Ø–ª—ç—ç–≥–¥—ç–∂ –±—É–π —Ö–∞—Ä–∏—É–ª—Ç—Ç–∞–π —Ç–∞–∞—Ä–∞—Ö–≥“Ø–π –±–∞–π–Ω–∞")
        print(f"–•“Ø–ª—ç—ç–≥–¥—ç–∂ –±—É–π: {expected_response}")
        print(f"–ë–æ–¥–∏—Ç: {actual_response}")
        return False

async def test_web_server():
    """Web —Å–µ—Ä–≤–µ—Ä–∏–π–≥ —Ç–µ—Å—Ç–ª—ç—Ö"""
    print("\nüåê Web —Å–µ—Ä–≤–µ—Ä–∏–π–≥ —Ç–µ—Å—Ç–ª—ç–∂ –±–∞–π–Ω–∞...")
    
    try:
        # –≠–Ω–≥–∏–π–Ω web —Å–µ—Ä–≤–µ—Ä “Ø“Ø—Å–≥—ç—Ö
        app = web.Application()
        
        async def test_handler(request):
            return web.Response(text="Test server is working!")
        
        app.router.add_get('/test', test_handler)
        
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, 'localhost', 8081)
        await site.start()
        
        print("‚úÖ Web —Å–µ—Ä–≤–µ—Ä –∞–º–∂–∏–ª—Ç—Ç–∞–π —ç—Ö—ç–ª–ª—ç—ç!")
        print("üìç –•–∞–Ω–¥–∞–ª—Ç—ã–Ω —Ö–∞—è–≥: http://localhost:8081/test")
        
        # –°–µ—Ä–≤–µ—Ä–∏–π–≥ –∑–æ–≥—Å–æ–æ—Ö
        await asyncio.sleep(2)
        await runner.cleanup()
        
        return True
        
    except Exception as e:
        print(f"‚ùå Web —Å–µ—Ä–≤–µ—Ä–∏–π–Ω –∞–ª–¥–∞–∞: {e}")
        return False

async def main():
    """“Æ–Ω–¥—Å—ç–Ω —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü"""
    print("ü§ñ Microsoft Teams Echo Bot - –õ–æ–∫–∞–ª —Ç–µ—Å—Ç")
    print("=" * 50)
    
    # –≠—Ö–æ –ª–æ–≥–∏–∫ —Ç–µ—Å—Ç
    echo_test_passed = await test_echo_logic()
    
    # Web —Å–µ—Ä–≤–µ—Ä —Ç–µ—Å—Ç
    web_test_passed = await test_web_server()
    
    print("\n" + "=" * 50)
    print("üìä –¢–µ—Å—Ç–∏–π–Ω “Ø—Ä –¥“Ø–Ω:")
    print(f"‚úÖ –≠—Ö–æ –ª–æ–≥–∏–∫: {'–ê–º–∂–∏–ª—Ç—Ç–∞–π' if echo_test_passed else '–ê–º–∂–∏–ª—Ç–≥“Ø–π'}")
    print(f"‚úÖ Web —Å–µ—Ä–≤–µ—Ä: {'–ê–º–∂–∏–ª—Ç—Ç–∞–π' if web_test_passed else '–ê–º–∂–∏–ª—Ç–≥“Ø–π'}")
    
    if echo_test_passed and web_test_passed:
        print("\nüéâ –ë“Ø—Ö —Ç–µ—Å—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π!")
        print("üìù Microsoft Teams —Ç–æ—Ö–∏—Ä–≥–æ–æ–≥ —Ö–∏–π—Å–Ω—ç—ç—Ä –±–æ—Ç –∞–∂–∏–ª–ª–∞—Ö –±–æ–ª–Ω–æ.")
    else:
        print("\n‚ùå –ó–∞—Ä–∏–º —Ç–µ—Å—Ç –∞–º–∂–∏–ª—Ç–≥“Ø–π –±–∞–π–Ω–∞.")

if __name__ == "__main__":
    asyncio.run(main())
